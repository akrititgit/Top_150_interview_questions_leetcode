def minOperations(self, nums: List[int], x: int) -> int:
        # c = 0
        # i = 0
        # j = len(nums)-1
        # while(i<=j):
        #     if (nums[i]<=x) and (nums[j]<=x):
        #         if (nums[i]<=nums[j]):
        #             x-=nums[j]
        #             j-=1
        #         else:
        #             x-=nums[i]
        #             i+=1
        #         c+=1
        #     else:
        #         return -1
        #     if x==0:
        #         return c
        # return -1
        
        targetSum = sum(nums) - x
        if targetSum <= 0:
            return -1 if targetSum < 0 else len(nums)
        largestWindow = -1
        curSum = 0
        left = 0
        for right, num in enumerate(nums):
            curSum += num
            while curSum > targetSum:
                curSum -= nums[left]
                left += 1
           if curSum == targetSum:
                largestWindow = max(largestWindow, right - left + 1)
       return len(nums) - largestWindow if largestWindow != -1 else -1
